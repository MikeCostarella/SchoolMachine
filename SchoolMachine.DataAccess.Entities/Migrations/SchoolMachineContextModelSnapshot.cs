// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SchoolMachine.DataAccess.Entities;

namespace SchoolMachine.DataAccess.Entities.Migrations
{
    [DbContext(typeof(SchoolMachineContext))]
    partial class SchoolMachineContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.1-servicing-10028")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("SchoolMachine.DataAccess.Entities.Models.Security.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RoleId");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DateCreated");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("Description")
                        .HasMaxLength(1000);

                    b.Property<bool>("IsActive")
                        .HasColumnName("IsActive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Roles","Security");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a2e6f3ab-bfb1-4521-b061-6774f4be0008"),
                            DateCreated = new DateTime(2019, 3, 3, 15, 55, 41, 380, DateTimeKind.Utc).AddTicks(2612),
                            Description = "Total access to all other roles",
                            IsActive = true,
                            Name = "System Administrator"
                        });
                });

            modelBuilder.Entity("SchoolMachine.DataAccess.Entities.Models.Security.Team", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TeamId");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DateCreated");

                    b.Property<DateTime>("DateModified")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("DateModified");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("Description")
                        .HasMaxLength(1000);

                    b.Property<bool>("IsActive")
                        .HasColumnName("IsActive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Teams","Security");
                });

            modelBuilder.Entity("SchoolMachine.DataAccess.Entities.Models.Security.TeamRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TeamRoleId");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("DateCreated");

                    b.Property<Guid>("RoleId");

                    b.Property<Guid>("TeamId");

                    b.HasKey("Id");

                    b.ToTable("TeamRoles","Security");
                });

            modelBuilder.Entity("SchoolMachine.DataAccess.Entities.Models.Security.TeamUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TeamUserId");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("DateCreated");

                    b.Property<Guid>("TeamId");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.ToTable("TeamUsers","Security");
                });

            modelBuilder.Entity("SchoolMachine.DataAccess.Entities.Models.Security.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UserId");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DateCreated");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnName("EmailAddress")
                        .HasMaxLength(150);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnName("FirstName")
                        .HasMaxLength(50);

                    b.Property<bool>("IsActive")
                        .HasColumnName("IsActive");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnName("LastName")
                        .HasMaxLength(50);

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnName("MiddleName")
                        .HasMaxLength(50);

                    b.Property<byte[]>("PasswordHash");

                    b.Property<byte[]>("PasswordSalt");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnName("UserName")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Users","Security");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e0033060-e8f3-40a4-acc0-813ea7adadd0"),
                            DateCreated = new DateTime(2019, 3, 3, 15, 55, 41, 381, DateTimeKind.Utc).AddTicks(8652),
                            EmailAddress = "auser1@email.com",
                            FirstName = "A",
                            IsActive = true,
                            LastName = "User1",
                            MiddleName = "A",
                            UserName = "auser1"
                        });
                });

            modelBuilder.Entity("SchoolMachine.DataAccess.Entities.Models.Security.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UserRoleId");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("DateCreated");

                    b.Property<Guid>("RoleId");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.ToTable("UserRoles","Security");
                });

            modelBuilder.Entity("SchoolMachine.DataAccess.Entities.SchoolData.Models.School", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SchoolId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Schools","SchoolData");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6b77d52b-d051-4a0a-8887-5a9ab8cc5135"),
                            Name = "Austintown Fitch High School"
                        },
                        new
                        {
                            Id = new Guid("e48eaa8b-ceee-4072-b980-c58fad81dbe2"),
                            Name = "Canfield High School"
                        },
                        new
                        {
                            Id = new Guid("009a3c04-aec4-4ac6-ae28-dda69ea49d99"),
                            Name = "Girard High School"
                        },
                        new
                        {
                            Id = new Guid("a4cccd64-2b80-417a-ab3f-471a677a6459"),
                            Name = "Liberty High School"
                        });
                });

            modelBuilder.Entity("SchoolMachine.DataAccess.Entities.SchoolData.Models.SchoolStudent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SchoolStudentId");

                    b.Property<DateTime>("DateCreated");

                    b.Property<string>("GradeLevel")
                        .IsRequired();

                    b.Property<DateTime>("RegistrationDate")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("SchoolId");

                    b.Property<Guid>("StudentId");

                    b.HasKey("Id");

                    b.ToTable("SchoolStudents","SchoolData");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ca46cb70-34e7-4f5a-9043-b9fd7ccabc2e"),
                            DateCreated = new DateTime(2019, 3, 3, 15, 55, 41, 381, DateTimeKind.Utc).AddTicks(2751),
                            GradeLevel = "9",
                            RegistrationDate = new DateTime(2019, 3, 3, 15, 55, 41, 381, DateTimeKind.Utc).AddTicks(4997),
                            SchoolId = new Guid("6b77d52b-d051-4a0a-8887-5a9ab8cc5135"),
                            StudentId = new Guid("8eb4056f-7dc0-46cf-ba91-a7a45f6c2e72")
                        },
                        new
                        {
                            Id = new Guid("c8765f5d-ab61-4568-b636-7a5467643502"),
                            DateCreated = new DateTime(2019, 3, 3, 15, 55, 41, 381, DateTimeKind.Utc).AddTicks(7414),
                            GradeLevel = "9",
                            RegistrationDate = new DateTime(2019, 3, 3, 15, 55, 41, 381, DateTimeKind.Utc).AddTicks(7429),
                            SchoolId = new Guid("e48eaa8b-ceee-4072-b980-c58fad81dbe2"),
                            StudentId = new Guid("194bb537-38ea-4bd3-901b-2eda9ff1e2ae")
                        },
                        new
                        {
                            Id = new Guid("c446c0af-baf7-4cc3-955f-4d3824e852d5"),
                            DateCreated = new DateTime(2019, 3, 3, 15, 55, 41, 381, DateTimeKind.Utc).AddTicks(7445),
                            GradeLevel = "9",
                            RegistrationDate = new DateTime(2019, 3, 3, 15, 55, 41, 381, DateTimeKind.Utc).AddTicks(7447),
                            SchoolId = new Guid("e48eaa8b-ceee-4072-b980-c58fad81dbe2"),
                            StudentId = new Guid("039545ed-ef84-4e4b-a6fa-c96566fdbb9e")
                        });
                });

            modelBuilder.Entity("SchoolMachine.DataAccess.Entities.SchoolData.Models.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("StudentId");

                    b.Property<DateTime>("BirthDate");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.HasKey("Id");

                    b.ToTable("Students","SchoolData");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8eb4056f-7dc0-46cf-ba91-a7a45f6c2e72"),
                            BirthDate = new DateTime(2005, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "John",
                            LastName = "Abott",
                            MiddleName = "Alfred"
                        },
                        new
                        {
                            Id = new Guid("194bb537-38ea-4bd3-901b-2eda9ff1e2ae"),
                            BirthDate = new DateTime(2005, 11, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Ann",
                            LastName = "Smith",
                            MiddleName = "Grace"
                        },
                        new
                        {
                            Id = new Guid("039545ed-ef84-4e4b-a6fa-c96566fdbb9e"),
                            BirthDate = new DateTime(2004, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Bill",
                            LastName = "Kriter",
                            MiddleName = "Anthony"
                        },
                        new
                        {
                            Id = new Guid("eacced0f-57bc-4d3c-a646-b469e4792ead"),
                            BirthDate = new DateTime(2005, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Sara",
                            LastName = "Carter",
                            MiddleName = "Lynn"
                        },
                        new
                        {
                            Id = new Guid("95ec2b04-9ddb-46c1-81e9-be1f4c2ea665"),
                            BirthDate = new DateTime(2006, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "John",
                            LastName = "Timkin",
                            MiddleName = "Dudley"
                        },
                        new
                        {
                            Id = new Guid("049579e8-6b69-4a02-a41c-4209af03fa53"),
                            BirthDate = new DateTime(2006, 12, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Abby",
                            LastName = "Smart",
                            MiddleName = "Darla"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
